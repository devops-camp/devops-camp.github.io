<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>semi-plan-202302-b on DevOps Camp</title><link>https://www.devopscamp.cc/tags/semi-plan-202302-b/</link><description>Recent content in semi-plan-202302-b on DevOps Camp</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 17 Feb 2023 22:34:14 +0800</lastBuildDate><atom:link href="https://www.devopscamp.cc/tags/semi-plan-202302-b/index.xml" rel="self" type="application/rss+xml"/><item><title>cobra08 - 使用第三方库 cobrautils 快速管理参数</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/cobra08-cobrautils/cobra08-cobrautils/</link><pubDate>Fri, 17 Feb 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/cobra08-cobrautils/cobra08-cobrautils/</guid><description>Cobra08 - 使用第三方库 cobrautils 快速管理参数 提示 cobrautils 是我写的一个 cobra 扩展库， 目的是为了能在 结构体 中 方便 的管理所有 flag 和默认值。 之前我们绑定参数时， 有多少参数就要写多少个 flag， 非常的麻烦。 1 2 3 4 5 6 7 8 9 10 11 12 type Person struct { Name string Age int } var p=&amp;amp;Person{} func init(){ root.Flags.StringVarP(&amp;amp;p.Name, &amp;#34;name&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;zhangsan&amp;#34;,&amp;#34;user name&amp;#34;) root.Flags.IntVarP(&amp;amp;p.Int, &amp;#34;age&amp;#34;,&amp;#34;a&amp;#34;,20,&amp;#34;user age&amp;#34;) } 但是用了 cobrautils 后， 所有的定义都在 结构体的标签中， 就</description></item><item><title>Golang Context 简介和入门使用</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-context-sample/context-sample/</link><pubDate>Fri, 17 Feb 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-context-sample/context-sample/</guid><description>Golang Context 简介和入门使用 提示 上下文 Context 应该是 Go语言 中一个极其重要的 基石 概念了。 这里有一篇 Go 语言设计与实现 - 上下文 Context ， 是目前我学习的资料中 完成度 和 友善度 都很高的一篇文章。 不管你愿不愿意， 用 Go 都绕不过 Context。不管用不用， 在所有 公共方法或函数 中强迫自己自己使用 context 作为入参。 虽然有点武断</description></item><item><title>Golang 接口(interface) 简介和入门使用</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-interface-sample/interface-sample/</link><pubDate>Fri, 17 Feb 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-interface-sample/interface-sample/</guid><description>Golang 接口(interface) 简介和入门使用 提示 上下文 Context 应该是 Go语言 中一个极其重要的 基石 概念了。 这里有一篇 Go 语言设计与实现 - 接口 interface ， 是目前我学习的资料中 完成度 和 友善度 都很高的一篇文章。 在 go v1.18 中， interface 有了一个别名 any。 所以在说 interface 和 any 的时候， 其实说的是相同的东西。 interface 的使用场景到处都是</description></item></channel></rss>