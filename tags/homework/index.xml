<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>homework on DevOps Camp</title><link>https://www.devopscamp.cc/tags/homework/</link><description>Recent content in homework on DevOps Camp</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 01 Mar 2023 08:34:14 +0800</lastBuildDate><atom:link href="https://www.devopscamp.cc/tags/homework/index.xml" rel="self" type="application/rss+xml"/><item><title>Cobra 综合实战练习： 实现一个命令行的 dns 客户端</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202303-a/cobra-kickoff-practise/dnsx/</link><pubDate>Wed, 01 Mar 2023 08:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202303-a/cobra-kickoff-practise/dnsx/</guid><description>Cobra 综合实战练习： 实现一个命令行的 dns 客户端 时间不知不觉到了 3 月， 我们的 DevOpsCamp 也到了 第4期。 在前面的内容中， 我尝试通过将 cobra 拆解成一个个功能， 并进行解释和扩展。 希望能带领大家逐步进入 Go 开发的世界。 其实这些都不难， 但是由于刚接触到一个未知的东西的时候， 总是有一种茫然无措， 不知道如何下手的烦躁</description></item><item><title>cobra08 - 使用第三方库 cobrautils 快速管理参数</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/cobra08-cobrautils/cobra08-cobrautils/</link><pubDate>Fri, 17 Feb 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/cobra08-cobrautils/cobra08-cobrautils/</guid><description>Cobra08 - 使用第三方库 cobrautils 快速管理参数 提示 cobrautils 是我写的一个 cobra 扩展库， 目的是为了能在 结构体 中 方便 的管理所有 flag 和默认值。 之前我们绑定参数时， 有多少参数就要写多少个 flag， 非常的麻烦。 1 2 3 4 5 6 7 8 9 10 11 12 type Person struct { Name string Age int } var p=&amp;amp;Person{} func init(){ root.Flags.StringVarP(&amp;amp;p.Name, &amp;#34;name&amp;#34;,&amp;#34;n&amp;#34;,&amp;#34;zhangsan&amp;#34;,&amp;#34;user name&amp;#34;) root.Flags.IntVarP(&amp;amp;p.Int, &amp;#34;age&amp;#34;,&amp;#34;a&amp;#34;,20,&amp;#34;user age&amp;#34;) } 但是用了 cobrautils 后， 所有的定义都在 结构体的标签中， 就</description></item><item><title>Golang Context 简介和入门使用</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-context-sample/context-sample/</link><pubDate>Fri, 17 Feb 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-context-sample/context-sample/</guid><description>Golang Context 简介和入门使用 提示 上下文 Context 应该是 Go语言 中一个极其重要的 基石 概念了。 这里有一篇 Go 语言设计与实现 - 上下文 Context ， 是目前我学习的资料中 完成度 和 友善度 都很高的一篇文章。 不管你愿不愿意， 用 Go 都绕不过 Context。不管用不用， 在所有 公共方法或函数 中强迫自己自己使用 context 作为入参。 虽然有点武断</description></item><item><title>Golang 接口(interface) 简介和入门使用</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-interface-sample/interface-sample/</link><pubDate>Fri, 17 Feb 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-b/golang-interface-sample/interface-sample/</guid><description>Golang 接口(interface) 简介和入门使用 提示 上下文 Context 应该是 Go语言 中一个极其重要的 基石 概念了。 这里有一篇 Go 语言设计与实现 - 接口 interface ， 是目前我学习的资料中 完成度 和 友善度 都很高的一篇文章。 在 go v1.18 中， interface 有了一个别名 any。 所以在说 interface 和 any 的时候， 其实说的是相同的东西。 interface 的使用场景到处都是</description></item><item><title>cobra 实战扩展练习</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra-exercise/cobra-exercise/</link><pubDate>Fri, 20 Jan 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra-exercise/cobra-exercise/</guid><description>cobra 实战扩展联系 本练习不属于基础知识点， 不保证一定会进行讲解。 如果有时间， 我一定（挖坑）。 1. Linux 命令行模拟 本题由 机智的程序员小熊 提供。 一共两个命令， 并且提供了两篇非常详细的公众号文章进行解释。从 golang 原生的 flag 开始介绍， 一直到 cobra。 非常的详细， 很值得一看。 参考源码地址: minibear2333/cmd_utils - Github 这是一个</description></item><item><title>Cobra07 - 命令行自动补全 （简单）</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra07-completion/cobra07-completion/</link><pubDate>Thu, 19 Jan 2023 22:47:01 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra07-completion/cobra07-completion/</guid><description>Cobra07 - 命令行自动补全 （简单） 提示 文档在官网 作业要求 作业要求 模拟 kubectl 实现一个带有 多子命令 及 多参数 的命令。 并根据官网提示， 在自己的命令终端实现 补全 功能 提示: 不用实现具体功能， 在 Run() 中打印一句话就行了。</description></item><item><title>Cobra06 - 持久化任务与参数</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra06-presistent/cobra06-persistent/</link><pubDate>Wed, 18 Jan 2023 22:47:01 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra06-presistent/cobra06-persistent/</guid><description>Cobra07 - 命令行自动补全 （简单） 提示 1 2 3 4 5 6 7 8 9 func main() { root := cobra.Command{ PersistentPreRun: func(cmd *cobra.Command, args []string) {}, PersistentPostRun: func(cmd *cobra.Command, args []string) {}, } root.PersistentFlags() } 作业要求 在 cobra 中提供了 Persistent Run 和 Flag， 作用是什么？ 父子孙命令之间， 是否具有继承关系？ 优先级是什么？ 自己想一段功能实现。 并论证。</description></item><item><title>Cobra05 - 子命令及子命令参数 （简单）</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra05-subcommand/cobra05-subcommand/</link><pubDate>Tue, 17 Jan 2023 22:54:13 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra05-subcommand/cobra05-subcommand/</guid><description>Cobra05 - 子命令及子命令参数 （简单） 提示 考虑 零值 要求 在 04 的基础上， 增加子命令 Address 增加 Gender 和 Account 两个参数。 默认账户余额 Account 100。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Usage: greeting [command] Available Commands: address completion Generate the autocompletion script for the specified shell help Help about any command Flags: --account int 账户余额 (default 100) --age int 年龄 (default 20) --gender 性别 -h, --help help for greeting --name string 用户名 Use &amp;#34;greeting [command] --help&amp;#34; for more information about a command. 增加 家庭住址子命令</description></item><item><title>cobra04 - 项目工程目录结构（简单）</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra04-layout/cobra04-layout/</link><pubDate>Mon, 16 Jan 2023 22:34:14 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202302-a/cobra04-layout/cobra04-layout/</guid><description>Cobra04 - 项目工程目录结构（简单） 提示 阅读 golang项目结构 h 提示： 这个标准是一个 建议， 开源社区大多循序此标准， **自己写代码， 可以遵循）。 而在不同的公司， 可能因为各种原因， 有自己的标准。 作业要求 将 作业: cobra - 01 实现编译与参数绑定 进行改造， 改造完成后符合工程目录 参考建议 1 2 3 4 5 6 7 8</description></item><item><title>作业: 翻译 《Dockerfile 最佳实践》</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/dockerfile-best-practices/dockerfile-best-practices/</link><pubDate>Fri, 13 Jan 2023 20:58:18 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/dockerfile-best-practices/dockerfile-best-practices/</guid><description>Dockerfile Best Practices 阅读并翻译 dockerfile 最佳实践 https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ 本文有很多命令， 从上下文可以推测文档内容。 因此相对简单。 本文有很多关键字的知识点。</description></item><item><title>作业: cobra - 03 交互式命令</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/cobra03/cobra03/</link><pubDate>Fri, 13 Jan 2023 15:19:07 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/cobra03/cobra03/</guid><description>作业: cobra - 03 交互式命令 要求: 使用 https://github.com/spf13/cobra 实现命令工具 使用 https://github.com/go-survey/survey 实现交互式命令 实现 Demo 效果 除了官方效果之外， 我还发现了 aliyun 命令行工具在配置账户的时候使用的是 交互式 ， 如下 为了更好的体现 实战性， 我们将以 aliyun configure --profile 的作为例子， 并进行一些优化。 参考答案 独立完成以后或无法完成的时候， 可以参考答案 https://tangx.in/posts/2023/01/26/devopscamp-cobra-interactive-survey/</description></item><item><title>作业: cobra - 02 读取配置配置文件</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/cobra02/cobra02/</link><pubDate>Thu, 12 Jan 2023 15:19:07 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/cobra02/cobra02/</guid><description>作业: cobra - 02 读取配置配置文件 要求: 使用 https://github.com/spf13/cobra 实现命令工具 命令具有以下参数 --config , -c 配置文件 配置文件如下 1 2 3 # config.yml name: zhangsan age: 20 将配置文件保存为 JSON 格式 1 $ cat config.json 输出结果 1 2 3 4 { &amp;#34;name&amp;#34;:&amp;#34;zhangsan&amp;#34;, &amp;#34;age&amp;#34;: 20 } 参考答案 独立完成以后或无法完成的时候， 可以参考答案 https://tangx.in/posts/2023/01/24/devopscamp-cobra-binding-config-file/</description></item><item><title>作业: cobra - 01 实现编译与参数绑定</title><link>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/cobra01/cobra01/</link><pubDate>Wed, 11 Jan 2023 15:19:07 +0800</pubDate><guid>https://www.devopscamp.cc/posts/semi-plan/homework/202301-b/cobra01/cobra01/</guid><description>作业: cobra - 01 实现编译与参数绑定 要求: 使用 https://github.com/spf13/cobra 实现命令工具 命令具有以下参数 --name 姓名 --age 年龄 如果年龄为空， 默认为 20 岁。 完成交叉编译脚本， 编译其他平台的二进制文件 -rwxr-xr-x 1 franktang staff 4220672 Jan 13 15:35 greeting-darwin-amd64 -rwxr-xr-x 1 franktang staff 4203442 Jan 13 15:35 greeting-darwin-arm64 -rwxr-xr-x 1 franktang staff 4215010 Jan 13 15:35 greeting-linux-amd64 -rwxr-xr-x 1 franktang staff 4157892 Jan 13 15:35 greeting-linux-arm64 执行输出效果如下 1 2 3 4 5 $ ./out/greeting-darwin-arm64 你好, 今年 20 岁 $ ./out/greeting-darwin-arm64 --age 30 --name zhangsan zhangsan</description></item></channel></rss>